
# This makefile based on ideas from http://make.paulandlesley.org/
# Thanks to Paul D. Smith <psmith@gnu.org>

export LC_ALL=C

.SUFFIXES:
.SECONDARY:
ROOT:=$(CURDIR)

CORO_IMPL = ASM

@SET_MAKE@
CC = @CC@
CPP = @CPP@
CFLAGS = @CFLAGS@
XCFLAGS = @XCFLAGS@
# no -Wextra & -Werror on bundled builds: compiler is unknown
ifeq (@BUNDLE@,)
WCFLAGS = @WCFLAGS@
endif
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
RANLIB = @RANLIB@
ARFLAGS = rc
RAGEL = @RAGEL@
RAGELFLAGS = @RAGELFLAGS@
DOT = @DOT@
CONFETTI = @CONFETTI@
GIT = @GIT@
HAVE_GIT = @HAVE_GIT@
ECHO = @ECHO@
CAT = cat
SED = @SED@
NM = @NM@
OBJCOPY = @OBJCOPY@
HAVE_RAGEL = @HAVE_RAGEL@
HAVE_CONFETTI = @HAVE_CONFETTI@
HAVE_LCOV = @HAVE_LCOV@
COVERAGE = @COVERAGE@
LIBS = @LIBS@
HAVE_CC_FLAG_W_NO_COMMENT = @HAVE_CC_FLAG_W_NO_COMMENT@
HAVE_CC_FLAG_W_NO_UNUSED_VALUE = @HAVE_CC_FLAG_W_NO_UNUSED_VALUE@
modules = @modules@
clients = @clients@
srcdir = @srcdir@
VPATH := @srcdir@

ifneq ($(words $(srcdir)),1)
  $(error source dir must not contain spaces)
endif

MAKEFLAGS += --no-print-directory

# some lua files are generated with CPP, they also need XCPPFLAGS
%.o %.lua: XCPPFLAGS += -I. -Iinclude
ifneq (.,$(srcdir))
  %.o %.lua: XCPPFLAGS += -I$(srcdir) -I$(srcdir)/include
endif

primary_module=$(firstword $(modules))
binary=octopus$(if $(WITH_MODNAME),_$(primary_module),)

DCFLAGS=$(filter -g%,$(XCFLAGS) $(CFLAGS))
%.o: XCFLAGS += -Wno-strict-aliasing -funwind-tables

ifeq ("$(origin V)", "command line")
    VERBOSE = $(V)
endif
ifeq (,$(VERBOSE))
  E:=@echo
  Q:=@
else
  E:=@:
  Q:=
endif

depend = $(patsubst %.o,%.d,$(1))

all: $(binary) $(foreach client,$(clients),$(client)_all)

subdirs += $(foreach dir,$(modules),mod/$(dir))
subdirs += $(foreach dir,$(clients),client/$(dir))
ifeq (,$(filter libiproto,$(clients)))
  subdirs += client/libiproto
endif
subdirs += third_party cfg src src-lua

sub-Makefile = $(foreach dir,$(subdirs),$(srcdir)/$(dir)/Makefile)
-include $(sub-Makefile)

$(binary): $(obj) .luajit
	$E "CC	$@"
	$Q$(CC) -L$(srcdir)/third_party/luajit/src $(filter-out .%,$^) -lluajit $(LIBS) $(XLDFLAGS) $(LDFLAGS) $(CFLAGS) -o $@

.luajit:
	@$(MAKE) -C $(srcdir)/third_party/luajit/src CC="$(CC)" E="$(E)" Q="$(Q)" \
		CCDEBUG=$(filter -g%,$(CFLAGS)) BUILDMODE=static \
		TARGET_CFLAGS='-funwind-tables -DLUAJIT_UNWIND_EXTERNAL' \
		libluajit.a jit/vmdef.lua luajit
	@touch .luajit

$(obj): Makefile $(sub-Makefile)

dep += $(call depend,$(obj))
-include $(dep)

$(filter-out $(no-extra-warns),$(obj)): XCFLAGS += $(WCFLAGS)

%.o: %.m
	@mkdir -p $(dir $@)
	$(E) "CC	$@"
	$(Q)$(CC) $(XCPPFLAGS) $(XCFLAGS) $(CPPFLAGS) $(CFLAGS) -Wno-protocol -fobjc-exceptions -c $< -o $@

%.o: %.c
	@mkdir -p $(dir $@)
	$(E) "CC	$@"
	$(Q)$(CC) $(XCPPFLAGS) $(XCFLAGS) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

define LUAJIT_B
LUA_PATH='$(srcdir)/third_party/luajit/src/?.lua' \
	$(srcdir)/third_party/luajit/src/luajit -b \
	$(if $(DCFLAGS),-g) \
	-n $(subst /,.,$(basename $(lastword $(subst src-lua/, ,$<)))) \
	$< $@
endef

%.o: %.lua .luajit
	@mkdir -p $(dir $@)
	$(E) "LUAJIT	$@"
	$(Q)$(LUAJIT_B)

ifeq (1,$(HAVE_RAGEL))
%.m: %.rl
	@mkdir -p $(dir $@)
	$(E) "RAGEL	$@"
	$(Q)$(RAGEL) -G2 $< -o $@

%.dot: %.rl
	@mkdir -p $(dir $@)
	$(E) "RAGEL	$@"
	$(Q)$(RAGEL) -p -V $< -o $(basename $@).dot

%.png: %.dot
	@mkdir -p $(dir $@)
	$(E) "DOT	$@"
	$(Q)$(DOT) -Tpng $< -o $(basename $@).png
endif

ifeq (1,$(HAVE_CONFETTI))
%.cfg: %.cfg_tmpl
	@mkdir -p $(dir $@)
	$(E) "CNFTI	$@"
	$(Q)$(CONFETTI) -i $< -n octopus_cfg -f $@

cfg/%.h: cfg/%.cfg_tmpl
	@mkdir -p $(dir $@)
	$(E) "CNFTI	$@"
	$(Q)$(CONFETTI) -i $< -n octopus_cfg -h $@

cfg/%.c: cfg/%.cfg_tmpl
	@mkdir -p $(dir $@)
	$(E) "CNFTI	$@"
	$(Q)$(CONFETTI) -i $< -n octopus_cfg -c $@
endif


FORCE:
.PHONY: FORCE
ifeq (1,$(HAVE_GIT))
BUNDLE=NONE
octopus_version.h: FORCE
	@echo -n 'const char octopus_version_string[] = "' > $@_
	@cd $(srcdir); $(GIT) describe --always HEAD | tr -d \\n >> $@_
	@echo -n - >> $@_
	@cd $(srcdir); $(GIT) branch | grep  '\*' | cut -f2 -d' ' | sed 's/^master$$/experimental/' | tr -d \\n >> $@_
	@echo '";' >> $@_
	@echo 'const char octopus_bundle_string[] = "$(BUNDLE)";' >> $@_;
	@diff -q $@ $@_ 2>/dev/null >/dev/null || (echo "GEN	$(notdir $@)"; cp $@_ $@)
	@rm $@_

all_modules = $(foreach path,$(wildcard mod/*),$(notdir $(path)))

$(foreach mod,$(all_modules),mod/$(mod)/$(mod)_version.h):
	@echo -n 'const char $(subst -,_,$(subst .h,,$(notdir $@)))_string[] = "' > $@_
	@cd $(srcdir)/$(dir $@); $(GIT) describe --always HEAD | tr -d \\n | sed 's/.*-g/g/' >> $(notdir $@_)
	@echo '";' >> $@_
	@diff -q $@ $@_ 2>/dev/null >/dev/null || (echo "GEN	$@"; cp $@_ $@)
	@rm $@_

dist += $(foreach mod,$(all_modules),mod/$(mod)/$(mod)_version.h)
endif

.PHONY: distclean clean
clean:
	$(E) "CLEAN	$(binary)"
	$(Q)rm -rf $(obj) $(patsubst %.o,%.gcno,$(obj))
	$(Q)rm -rf $(dep) $(binary) lcov test/var

luaclean:
	$(E) "CLEAN	luajit"
	$(Q)rm -f .luajit
	$(Q)$(MAKE) -C third_party/luajit/src CC="$(CC)" E="$(E)" Q="$(Q)" clean

configure-byproducts += autom4te.cache config.log config.status
configure-byproducts += include/config.h Makefile

distclean: clean luaclean
	$(Q)rm -rf $(dist-clean)
	$(Q)rm -rf $(configure-byproducts) configure install.sh
	$(Q)rm -rf TAGS test/var test/*.rej

.PHONY: TAGS
TAGS:
	ctags-exuberant --langmap=ObjectiveC:.m.h.rl -eR

.PHONY: test
define run_test
$(foreach test,$(sort $(wildcard $(foreach mod,$(modules),mod/$(mod)/test/test_*))),./$(test)
)
endef
test:	$(binary)
	@$(run_test)

ifeq (1,$(COVERAGE))
clean: clean-coverage
ifeq (1,$(HAVE_LCOV))
octopus.cov: $(patsubst %.o,%.gcda,$(obj)) $(patsubst %.o,%.gcno,$(obj))
	lcov --output-file $@ --base-directory . --capture --directory .
	lcov --output-file $@ --remove $@ y.tab.c prscfg.l prscfg.y prscfg_scan.c /usr/\*
octopus.coverage/index.html: octopus.cov
	genhtml --output-directory $(dir $@) $<
else
octopus.cov: $(patsubst %.o,%.gcda,$(obj)) $(patsubst %.o,%.gcno,$(obj))
	python scripts/zcov/zcov-scan $@
octopus.coverage/index.html: octopus.cov
	python scripts/zcov/zcov-genhtml $< $(dir $@)
endif

$(patsubst %.o,%.gcda,$(obj)): test

.PHONY: coverage clean-coverage
coverage: octopus.coverage/index.html
	sensible-browser $<

clean-coverage:
	@rm -rf $(patsubst %.o,%.gcda,$(obj)) \
		octopus.coverage octopus.cov
endif


Makefile: config.status $(srcdir)/include/config.h.in $(srcdir)/Makefile.in $(sub-Makefile)
	./config.status

config.status: $(srcdir)/configure
	./config.status --recheck

$(srcdir)/configure: configure.ac third_party/libev/libev.m4
	cd $(srcdir) && autoconf

.PHONY: dist pre-dist
pre-dist: configure $(dist) octopus_version.h
	@rm -rf $(configure-byproducts)
dist:
	@./scripts/make-dist.sh $(foreach mod,$(modules),mod/$(mod))

$(eval $(defered))

ifeq (1,$(I))
    $(info * build with $(filter -D%,$(CFLAGS)))
endif

